#include <bits/stdc++.h> 
class Node {
public:

    Node* links[26];
    int endWith = 0;
    int cntPre = 0;

    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }

    void put(char ch, Node* node) {
        links[ch - 'a'] = node;
    }

    Node* get(char ch) {
        return links[ch - 'a'];
    }

    void setPre() {
        cntPre++;
    }

    void setEnd() {
        endWith++;
    }

    int getPreCnt() {
        return cntPre;
    }

    int getWordCnt() {
        return endWith;
    }

    void erasePre() {
        cntPre--;
    }

    void eraseWord() {
        endWith--;
    }
};

class Trie {
private:
    Node* root;

public:

    Trie(){
        root = new Node();
    }

    void insert(string &word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++) {
            if(!node->containsKey(word[i])) {
                node->put(word[i], new Node());
            }
            node = node->get(word[i]);
            node->setPre();
        }
        node->setEnd();
    }

    int countWordsEqualTo(string &word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++) {
            if(!node->containsKey(word[i])) {
                return 0;
            }
            node = node->get(word[i]);
        }
        int ans = node->getWordCnt();
        return ans;
    }

    int countWordsStartingWith(string &word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++) {
            if(!node->containsKey(word[i])) {
                return 0;
            }
            node = node->get(word[i]);
        }
        int ans = node->getPreCnt();
        return ans;
    }

    void erase(string &word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++) {
            if(!node->containsKey(word[i])) {
                return;
            }
            node = node->get(word[i]);
            node->erasePre();
        }
        node->eraseWord();
    }
};
