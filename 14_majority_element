// Find the Majority Element that occurs more than N/2 times

// Better Approach - Using Hashmap

#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	unordered_map<int, int> mp;
	for(int i=0; i<n; i++) {
		mp[arr[i]]++;
	}
	int num = n / 2;
	int ans = -1;
	for(auto it : mp) {
		if(it.second > num) ans = it.first;
	}
	return ans;
}


// Optimal Approach - Mooreâ€™s Voting Algorithm

#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	int ele;
	int cnt = 0;
	for(int i=0; i<n; i++) {
		if(cnt == 0) {
			ele = arr[i];
			cnt = 1;
		}
		else if(arr[i] == ele) {
			cnt++;
		}
		else {
			cnt--;
		}
	}

	int count = 0;
	for(int i=0; i<n; i++) {
		if(arr[i] == ele) {
			count++;
		}
	}

	if(count > (n / 2)) return ele;
	return -1;
}

// TC - O(N)