// Brute force

Node* findIntersection(Node *l1, Node *l2) {

    while(l2 != NULL) {
        Node* temp = l1;
        while(temp != NULL) {
            if(temp == l2) return l2;
            temp = temp->next;
        }
        l2 = l2->next;
    }
    return NULL;
}


// optimal Approach - Hashing

Node* findIntersection(Node *l1, Node *l2) {
    unordered_set<Node*> s;
    while(l1 != NULL) {
        s.insert(l1);
        l1 = l1->next;
    }

    while(l2 != NULL) {
        if(s.find(l2) != s.end()) {
            return l2;
        }
        l2 = l2->next;
    }
    return NULL;    
}

// Distance measurement


Node* findIntersection(Node *l1, Node *l2) {
    int n1 = 0;
    int n2 = 0;
    
    Node* cur1 = l1;
    Node* cur2 = l2;

    while(cur1 != NULL || cur2 != NULL) {
        if(cur1 != NULL) {
            ++n1;
            cur1 = cur1->next;
        }
        if(cur2 != NULL) {
            ++n2;
            cur2 = cur2->next;
        }
    }

    int diff = n1 - n2;

    Node* temp1 = l1;
    Node* temp2 = l2;

    if(diff < 0) {
        while(diff++ != 0) {
            temp2 = temp2->next;
        }
    }
    else {
        while(diff-- != 0) {
            temp1 = temp1->next;
        }
    }

    while(temp1 != NULL) {
        if(temp1 == temp2) {
            return temp1;
        }
        temp1 = temp1->next;
        temp2 = temp2->next;
    }

    return NULL;
}


// Optimised Approach
Node* findIntersection(Node *l1, Node *l2) {
    node* d1 = l1;
    node* d2 = l2;
    
    while(d1 != d2) {
        d1 = d1 == NULL? l2:d1->next;
        d2 = d2 == NULL? l1:d2->next;
    }
    
    return d1;
}