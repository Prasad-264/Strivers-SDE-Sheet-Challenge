// Recursive Approach

#include <bits/stdc++.h> 
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/

void inorder(TreeNode* root, vector<int>& ans) {
    if(root == NULL) return;
    inorder(root->left, ans);
    ans.push_back(root->data);
    inorder(root->right, ans);
}

vector<int> getInOrderTraversal(TreeNode *root) {
    vector<int> ans;
    inorder(root, ans);
    return ans;
}



// Iterative Approach

vector<int> getInOrderTraversal(TreeNode *root) {
    vector<int> ans;
    stack<TreeNode*> s;
    TreeNode* cur = root;

    while(cur!=NULL || !s.empty()) {
        while(cur != NULL) {
            s.push(cur);
            cur = cur->left;
        }
        cur = s.top();
        s.pop();
        ans.push_back(cur->data);
        cur = cur->right;
    }

    return ans;
}
