// Using Priority queue

#include <bits/stdc++.h> 

int jobScheduling(vector<vector<int>> &jobs) {
    int n = jobs.size();
    priority_queue<int> pq;
    unordered_map<int, vector<int>> mp;
    int maxi = 0;
    for(int i=0; i<n; i++) {
        maxi = max(maxi, jobs[i][0]);
        mp[jobs[i][0]].push_back(jobs[i][1]);
    }

    int ans = 0;
    for(int i=maxi; i>0; i--) {
        
        for (auto &q : mp[i]) {
            pq.push(q);
        }
        if(pq.size() == 0) {
            continue;
        }
        ans += pq.top();
        pq.pop();
    }
    return ans;
}


// Using Sorting

#include <bits/stdc++.h> 

bool comparator(vector<int>j1,vector<int>j2) {
    return j1[1]>j2[1] || (j1[1]==j2[1] && j1[0]>=j2[0]);
}

int jobScheduling(vector<vector<int>> &jobs) {
    sort(jobs.begin(),jobs.end(),comparator);
    int maxDeadline = -1;
    for(int i=0; i<jobs.size(); i++) {
        maxDeadline = max(maxDeadline, jobs[i][0]);
    }
    vector<int> dp(maxDeadline+1, -1);
    for(int i=0; i<jobs.size(); i++) {
        int d = jobs[i][0];
        for(int j=d; j>0; j--) {
            if(dp[j] == -1) {
                dp[j] = jobs[i][1];
                break;
            }
        }
    }
    int profit = 0;
    for(int i=1; i<=maxDeadline; i++) {
        if(dp[i] != -1) {
            profit += dp[i];
        }
    }
    return profit;
}
