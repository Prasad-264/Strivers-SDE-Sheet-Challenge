#include <bits/stdc++.h> 
/*************************************************************

    Following is the Binary Tree node structure

    template <typename T>

    class TreeNode{
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
        ~TreeNode() {
            if (left){
                delete left;
            }
            if (right){
                delete right;
            }
        }
    };

*************************************************************/

TreeNode<int>* buildBST(vector<int>& preOrder, int& i, int bound) {
    if(i == preOrder.size() || preOrder[i] > bound) return NULL;
    TreeNode<int>* root = new TreeNode<int>(preOrder[i++]);
    root->left = buildBST(preOrder, i, root->data);
    root->right = buildBST(preOrder, i, bound);
    return root;
}


TreeNode<int>* preOrderTree(vector<int> &preOrder) {
    int i = 0;
    return buildBST(preOrder, i, INT_MAX);
}

// O(N)

// Another method is construct a BST fron inorder and preorder
// inorder traversal in BST is always Sorted in manner, so sort the preorder array