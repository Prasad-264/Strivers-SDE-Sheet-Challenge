// Approach 1 - Using extra space

#include <bits/stdc++.h>

int findDuplicate(vector<int> &arr, int n) {
	unordered_set<int> s;
	for(int i=0; i<n; i++) {
		if(s.find(arr[i]) != s.end()) {
			return arr[i];
		}
		else {
			s.insert(arr[i]);
		}
	}
}

// Approach 2 - Using slow and fast pointer

#include <bits/stdc++.h>

int findDuplicate(vector<int> &nums, int n) {
	int slow = nums[0];
	int fast = nums[0];
	do {
		slow = nums[slow];
		fast = nums[nums[fast]];
	} while (slow != fast);
	
	fast = nums[0];
	while (slow != fast) {
		slow = nums[slow];
		fast = nums[fast];
	}
	return slow;
}

// TC - O(n)
// SC - O(1)