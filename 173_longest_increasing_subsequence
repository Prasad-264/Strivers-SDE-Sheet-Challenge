// Recusrion 


int lis(int ind, int prev, int arr[], int n) {
    if(ind == n) return 0;

    // not pick;
    int len = lis(ind+1, prev, arr, n);

    // pick
    if(prev == -1 || arr[ind] > arr[prev]) {
        len = max(len, 1 + lis(ind+1, ind, arr, n));
    }
    return len;
}

int longestIncreasingSubsequence(int arr[], int n) {
    return lis(0, -1, arr, n);
}



// Memoization

#include <bits/stdc++.h>
int lis(int ind, int prev, int arr[], int n, vector<vector<int>>& dp) {
    if(ind == n) return 0;
    if(dp[ind][prev+1] != -1) return dp[ind][prev+1];
    // not pick;
    int len = lis(ind+1, prev, arr, n, dp);

    // pick
    if(prev == -1 || arr[ind] > arr[prev]) {
        len = max(len, 1 + lis(ind+1, ind, arr, n, dp));
    }
    return dp[ind][prev+1] = len;
}

int longestIncreasingSubsequence(int arr[], int n) {
    vector<vector<int>> dp(n, vector<int> (n+1, -1));
    return lis(0, -1, arr, n, dp);
}


// tabulation

#include <bits/stdc++.h>

int longestIncreasingSubsequence(int arr[], int n) {
    vector<vector<int>> dp(n+1, vector<int> (n+1, 0));
    for(int ind = n-1; ind>=0; ind--) {
        for(int prev = ind-1; prev>=-1; prev--) {
            int len = dp[ind+1][prev+1];
            if(prev == -1 || arr[ind] > arr[prev]) {
                len = max(len, 1 + dp[ind+1][ind+1]);
            }
            dp[ind][prev+1] = len;
        }
    }
    return dp[0][-1+1];
}


// Space Optimaization

#include <bits/stdc++.h>

int longestIncreasingSubsequence(int arr[], int n) {
    vector<int> next(n+1, 0), cur(n+1, 0);
    for(int ind = n-1; ind>=0; ind--) {
        for(int prev = ind-1; prev>=-1; prev--) {
            int len = next[prev+1];
            if(prev == -1 || arr[ind] > arr[prev]) {
                len = max(len, 1 + next[ind+1]);
            }
            cur[prev+1] = len;
        }
        next = cur;
    }
    return cur[-1+1];
}


// Another method using tabulation - O(n*n)

#include <bits/stdc++.h>
int longestIncreasingSubsequence(int arr[], int n) {
    vector<int> dp(n, 1);
    for(int ind=0; ind<n; ind++) {
        for(int prev=0; prev<ind; prev++) {
            if(arr[prev] < arr[ind]) {
                dp[ind] = max(dp[ind], 1 + dp[prev]);
            }
        }
    }
    
    int maxi = 0;
    for(auto it : dp) {
        maxi = max(maxi, it);
    }
    
    return maxi;
}


// Binary Search

#include <bits/stdc++.h>
int longestIncreasingSubsequence(int arr[], int n) {
    vector<int> temp; // temp is not storing the lis 
    temp.push_back(arr[0]);;
    for(int i=1; i<n; i++) {
        if(temp.back() < arr[i]) {
            temp.push_back(arr[i]);
        }
        else {
            int ind = lower_bound(temp.begin(), temp.end(), arr[i]) - temp.begin();
            temp[ind] = arr[i];
        }
    }
    return temp.size();
}
