// Recursive Approach

#include <bits/stdc++.h> 
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/

void postOrder(TreeNode* root, vector<int>& ans) {
    if(root == NULL) return;
    postOrder(root->left, ans);
    postOrder(root->right, ans);
    ans.push_back(root->data);
}

vector<int> getPostOrderTraversal(TreeNode *root) {
    vector<int> ans;
    postOrder(root, ans);
    return ans;
}


// Iterative approach

vector<int> getPostOrderTraversal(TreeNode *root) {
    vector<int> ans;
    stack<TreeNode*> st;
    TreeNode* last = NULL;
    while(root || !st.empty()) {
        if(root != NULL) {
            st.push(root);
            root = root->left;
        } 
        else {
            TreeNode* node = st.top();
            if(node->right && last != node->right) {
                root = node->right;
            } 
            else {
                ans.push_back(node->data);
                last = node;
                st.pop();
            }
        }
    }
    return ans;
}