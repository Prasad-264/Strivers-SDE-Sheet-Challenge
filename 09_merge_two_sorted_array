// Brute Force using extra space

#include <bits/stdc++.h>

vector<int> merge(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	vector<int> ans;
	int i = 0, j = 0;
	while(i < m && j < n) {
        if(arr1[i] <= arr2[j]) {
            ans.push_back(arr1[i]);
            i++;
        }
        if(arr2[j] < arr1[i]) {
			ans.push_back(arr2[j]);
			j++;
		}
	}
	while(i < m) {
		ans.push_back(arr1[i]);
		i++;
	}
	while(j < n) {
		ans.push_back(arr2[j]);
		j++;
	}
	return ans;
}

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	vector<int> a1;
	for(int i=0; i<arr1.size();i++){
		if(arr1[i]!=0) a1.push_back(arr1[i]);
	}
	return merge(a1,arr2,m,n);
	
}

// Optimal solution

#include <bits/stdc++.h>

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	int i = m - 1, j = n - 1, k = m + n - 1;
	while(i >= 0 and j >= 0) {
		if(arr1[i] < arr2[j]) {
			arr1[k] = arr2[j];
			k--;
			j--;
		} 
		else {
			arr1[k] = arr1[i];
			k--;
			i--;
		}
	}
	while(j >= 0) {
		arr1[k] = arr2[j];
		k--;
		j--;
	}
	return arr1;
}76