// Brute force
// Search Pattern (Rabin-Karp Algorithm)

vector<int> stringMatch(string text, string pattern) {
	int n = text.size();
	int m = pattern.size();

	if(m > n) return {};

	vector<int> ans;
	for(int i=0; i<n; i++) {
		int s = i;
		int e = 0;
		while(e < m && text[s] == pattern[e]) {
			s++;
			e++;
		}

		if(e == m) ans.push_back(i+1);
	}
	return ans;
}


// Rabin-Karp Algorithm


int pow(int a, int b, int m) {
	int ans = 1;
	while(b) {
		if(b&1) ans = (a* 1ll * ans) % m;
		a = (a * 1ll * a) % m;
		b >>= 1;
	}
	return ans;
}

vector<int> stringMatch(string text, string pattern) {
	int n = text.size();
	int k = pattern.size();
	int m = 5381; // any prime number

	vector<int> ans;

	int h = 0, hw = 0;
	
	for(int i=0; i<k; i++) {
		int ch = pattern[i]-'a'+1;
		h = (h + (ch * pow(26, k-i-1, m) % m) % m) % m;
		ch = text[i]-'a'+1;
		hw = (hw + (ch * pow(26, k-i-1, m) % m) % m) % m;
	}

	for(int i=k; i<=n; i++) {
		if(h == hw) {
			// check the pattern if matches or not
			bool flag = true;
			for(int j=0; j<k; j++) {
				if(pattern[j] != text[i-k+j]) {
					flag = false;
					break;
				}
			}
			if(flag) ans.push_back(i-k+1); // +1 due to 1 based indexing
		}

		// slide the window
		if(i == n) break;

		// remove last char
		int ch = text[i-k]-'a'+1;
		hw = (hw - (ch * pow(26, k-1, m) % m) % m + 0ll + m) % m;
		hw = (hw * 1ll * 26) % m;

		// add next char
		ch = text[i]-'a'+1;
		hw = (hw + ch) % m;
	}
	return ans;	
}

// O(n + m)