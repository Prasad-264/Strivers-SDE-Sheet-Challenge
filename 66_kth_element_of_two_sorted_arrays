// Brute force solution

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int n, int m, int k) {
    int i = 0, j = 0;
    vector<int> arr;
    while(i < n && j < m) {
        if(row1[i] < row2[j]) {
            arr.push_back(row1[i]);
            i++;
        }
        else {
            arr.push_back(row2[j]);
            j++;
        }
    }
    while(i < n) {
        arr.push_back(row1[i]);
        i++;
    }
    while(j < m) {
        arr.push_back(row2[j]);
        j++;
    }
    return arr[k-1];
}

// Without using extra space

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int n, int m, int k) {
    int i = 0, j = 0;
    int cnt = 0, ans = 0;
    while(i < n && j < m) {
        if(cnt == k) break;
        if(row1[i] < row2[j]) {
            ans = row1[i];
            i++;
        }
        else {
            ans = row2[j];
            j++;
        }
        cnt++;
    }
    while(i < n) {
        cnt++;
        if(cnt == k) ans = row1[i];
        i++;
        
    }
    while(j < m) {
        cnt++;
        if(cnt == k) ans = row2[j];
        j++;
    }
    return ans;
}

// Binary Search

#include<bits/stdc++.h>
int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
    if(m > n) return ninjaAndLadoos(row2, row1, n, m, k);
    int low = max(0, k - n);
    int high = min(k, m);
    while(low <= high) {
        int cut1 = (low + high) / 2;
        int cut2 = k - cut1;

        int l1 = cut1 == 0 ? INT_MIN : row1[cut1 - 1];
        int l2 = cut2 == 0 ? INT_MIN : row2[cut2 - 1];
        int r1 = cut1 == m ? INT_MAX : row1[cut1];
        int r2 = cut2 == n ? INT_MAX : row2[cut2];

        if(l1 <= r2 && l2 <= r1) {
            return max(l1, l2);
        }
        else if(l1 > r2) {
            high = cut1 - 1;
        }
        else {
            low = cut1 + 1;
        }
    }
    return 1;
}