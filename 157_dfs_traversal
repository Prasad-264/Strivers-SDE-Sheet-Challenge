
void dfs(int node, vector<int> adj[], vector<int>& vis, vector<int> &ds) {
    vis[node] = 1;
    ds.push_back(node);
    for(auto it : adj[node]) {
        if(!vis[it]) {
            dfs(it, adj, vis, ds);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges) {
    vector<int> adj[V];
    for(auto it : edges) {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }

    vector<int> vis(V+1, 0);
    vector<vector<int>> ans;
    for(int i=0; i<V; i++) {
        vector<int> ds;
        if(!vis[i]) {
            dfs(i, adj, vis, ds);
        }
        if(!ds.empty()) ans.push_back(ds);
    }
    return ans;
}