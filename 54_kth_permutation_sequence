// Using Recursion

#include <bits/stdc++.h>
void premutation(int ind, string s, vector<string>& ans) {
    if(ind == s.size()) {
        ans.push_back(s);
        return;
    }
    for(int i=ind; i<s.size(); i++) {
        swap(s[i], s[ind]);
        premutation(ind+1, s, ans);
        swap(s[i], s[ind]);
    }
}

string kthPermutation(int n, int k) {
    string s;
    for(int i=1; i<=n; i++) {
        s.push_back(i + '0');
    }
    vector<string> ans;
    premutation(0, s, ans);
    sort(ans.begin(), ans.end());
    return ans[k-1];
}

// optimised Approach

string kthPermutation(int n, int k) {

    int fact = 1;
    // in numbers array we will sotre and pick the numbers
    // if arr is [1, 2, 3, 4] --> 1 + [2, 3, 4] ]-> 6  (3! = 3*2)
    // if arr is [1, 2, 3, 4] --> 2 + [1, 3, 4] ]-> 6  (3! = 3*2)
    // if arr is [1, 2, 3, 4] --> 3 + [1, 2, 4] ]-> 6  (3! = 3*2)
    
    vector<int> numbers;
    for(int i = 1; i < n; i++) {
        fact = fact * i;
        numbers.push_back(i);
    }
    numbers.push_back(n);
    // for 0 base indexing
    k = k-1;
    string ans = "";
    while(true){
        ans += to_string(numbers[k/fact]);
        // erasing the picked number
        numbers.erase(numbers.begin() + k/fact);

        if(numbers.size() == 0) {
            break;
        }

        // re calculating k
        k = k % fact;
        fact = fact / numbers.size();
    }

    return ans;
}