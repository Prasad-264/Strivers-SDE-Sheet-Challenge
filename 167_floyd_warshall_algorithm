int floydWarshall(int n, int m, int src, int dest, vector<vector<int>> &edges) {
    vector<vector<int>> dist(n, vector<int> (n, 1000000000));
    for(auto it : edges) {
        int u = it[0]-1;
        int v = it[1]-1;
        int wt = it[2];

        dist[u][v] = wt;
    }
    for(int i=0; i<n; i++) dist[i][i] = 0;

    for(int via=0; via<n; via++) {
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(dist[i][via] != 1e9 && dist[via][j] != 1e9) {
                    dist[i][j] = min(dist[i][j], dist[i][via] + dist[via][j]);
                }
            }
        }
    }

    // if the negative cycle is present
    // then the node will come back to itself
    // and if the path weight is negaitve
    // then the negative cycle is present

    // for(int i=0; i<n; i++)  {
    //     if(dist[i][i] < 0) {
    //         // cycle present;
    //     }
    // }

    return dist[src-1][dest-1];
}