// hashmap and DLL

#include<bits/stdc++.h>

class Node {
public:
    int key;
    int val;
    Node* prev;
    Node* next;

    Node(int _key, int _val){
        key = _key;
        val = _val;
    }
};

class LRUCache {
public:

    Node* head = new Node(-1, -1);
    Node* tail = new Node(-1, -1);

    int cap;
    unordered_map<int, Node*> mp;

    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }

    void addNode(Node* newnode) {
        Node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }

    void deletenode(Node* delnode) {
        Node* delprev = delnode->prev;
        Node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }

    int get(int key) {
        if(mp.find(key) != mp.end()) {
            Node* resnode = mp[key];
            int ans = resnode->val;
            mp.erase(key);
            deletenode(resnode);
            addNode(resnode);
            mp[key] = head->next;
            return ans;
        }
        return -1;
    }

    void put(int key, int value) {
        if(mp.find(key) != mp.end()) {
            Node* del = mp[key];
            mp.erase(key);
            deletenode(del);
        }
        if(mp.size() == cap) {
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addNode(new Node(key, value));
        mp[key] = head->next;
    }
};
