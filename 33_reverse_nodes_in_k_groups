// Coding Ninjas

#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

Node *getListAfterReverseOperation(Node *head, int n, int b[]){
	stack<int>s;
    Node* cur = head;
    Node* dummy = new Node(-1);
    Node* temp = dummy;
    for(int i=0; i<n; i++) {
        int num = b[i];
        while(num != 0 && cur != NULL) {
           s.push(cur->data);
           cur = cur->next;
           num--;
        }

        while(!s.empty()) {
           Node* x = new Node(s.top());
           s.pop();
           temp->next = x;
           temp = temp->next;
        }
    }
    while(cur != NULL) {
        temp->next= cur;
        cur = cur->next;
        temp = temp->next;
    }
    return dummy->next;
}


// Leetcode

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* cursor = head;
        for(int i = 0; i < k; i++){
            if(cursor == nullptr) return head;
            cursor = cursor->next;
        }
        
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* temp = NULL;
        for(int i=0; i<k; i++) {
            temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        //if(temp != NULL) {
        head->next = reverseKGroup(curr, k);
        //}
        return prev;
    }
};



node* reverseKNodes(node* head,int k) {
    if(head == NULL||head->next == NULL) return head;
    
    int length = lengthOfLinkedList(head);
    
    node* dummyHead = new node(0);
    dummyHead->next = head;
    
    node* pre = dummyHead;
    node* cur;
    node* nex;
    
    while(length >= k) {
        cur = pre->next;
        nex = cur->next;
        for(int i=1;i<k;i++) {
            cur->next = nex->next;
            nex->next = pre->next;
            pre->next = nex;
            nex = cur->next;
        }
        pre = cur;
        length -= k;
    }
    return dummyHead->next;
}