// Kosaraju's Algorithm

#include<bits/stdc++.h>

void dfs(int node, vector<int> adj[], vector<int>& vis, stack<int> &st) {
    vis[node] = 1;
    for(auto it : adj[node]) {
        if(!vis[it]) {
            dfs(it, adj, vis, st);
        }
    }
    st.push(node);
}

void dfs2(int node, vector<int> adjT[], vector<int>& vis, vector<int> &ds) {
    vis[node] = 1;
    ds.push_back(node);
    for(auto it : adjT[node]) {
        if(!vis[it]) {
            dfs2(it, adjT, vis, ds);
        }
    }
}

vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges) {
    vector<int> adj[n];
    for(auto it : edges) {
        adj[it[0]].push_back(it[1]);
    }

    vector<int> vis(n, 0);

    // step 1 = sort all egdes according to finishing time
    // toposort
    stack<int> st;
    for(int i=0; i<n; i++) {
        if(!vis[i]) {
            dfs(i, adj, vis, st);
        }
    }

    // step 2 = reverse the graph
    vector<int> adjT[n];
    for(auto it : edges) {
        // it[0] -> it[1] = normal graph
        // it[1] -> it[0] = reverse the edges
        adjT[it[1]].push_back(it[0]);
    }

    for(int i=0; i<n; i++) vis[i] = 0;

    // step 3 = do the DFS on reverse graph 
    // staring from stack top node
    
    vector<vector<int>> ans;
    while(!st.empty()) {
        int it = st.top();
        st.pop();

        vector<int> ds;
        if(!vis[it]) {
            dfs2(it, adjT, vis, ds);
        }
        ans.push_back(ds);
    }
    return ans;
}