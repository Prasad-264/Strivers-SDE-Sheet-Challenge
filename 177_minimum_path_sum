// Recursion

#include <bits/stdc++.h> 
int fun(int i, int j, vector<vector<int>>& grid) {
    if(i==0 && j==0) return grid[0][0];
    if(i < 0 || j < 0) return 0;
    int left = INT_MAX, up = INT_MAX;
    if(j > 0) left = fun(i, j-1, grid);
    if(i > 0) up = fun(i-1, j, grid);
    return grid[i][j] + min(left, up);
}

int minSumPath(vector<vector<int>> &grid) {
    int n = grid.size();
    int m = grid[0].size();

    return fun(n-1, m-1, grid);
}


// Memoization

#include <bits/stdc++.h> 
int fun(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& dp) {
    if(i==0 && j==0) return grid[0][0];
    if(i < 0 || j < 0) return 0;
    if(dp[i][j] != -1) return dp[i][j];

    int left = INT_MAX, up = INT_MAX;
    if(j > 0) left = fun(i, j-1, grid, dp);
    if(i > 0) up = fun(i-1, j, grid, dp);
    return dp[i][j] = grid[i][j] + min(left, up);
}

int minSumPath(vector<vector<int>> &grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<int>> dp(n, vector<int> (m, -1));
    return fun(n-1, m-1, grid, dp);
}


// Tabulation

#include <bits/stdc++.h> 

int minSumPath(vector<vector<int>> &grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<int>> dp(n, vector<int> (m, 0));
    dp[0][0] = grid[0][0];
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            if(i==0 && j==0) continue;
            int left = 0, up = 0;

            if(j > 0) left = dp[i][j-1];
            else left = INT_MAX;

            if(i > 0) up = dp[i-1][j];
            else up = INT_MAX;

            dp[i][j] = grid[i][j] + min(left, up);
        }
    }
    return dp[n-1][m-1];
}


// Space optimaization

