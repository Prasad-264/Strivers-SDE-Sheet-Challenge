
// DFS Solution


bool dfs(int node, vector<int> adj[], vector<int>& vis, vector<int>& pathVis) {
    vis[node] = 1;
    pathVis[node] = 1;
    for(auto it : adj[node]) {
      if(!vis[it]) {
        if(dfs(it, adj, vis, pathVis)) return true;
      }
      else if(pathVis[it]) {
        return true;
      }
    }
    pathVis[node] = 0;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
    vector<int> adj[n+1];
    for(auto it : edges) {
      int u = it.first;
      int v = it.second;
      adj[u].push_back(v);
    }

    vector<int> vis(n+1, 0);
    vector<int> pathVis(n+1, 0);
    for(int i=0; i<n; i++) {
      if(!vis[i]) {
        if(dfs(i, adj, vis, pathVis)) return 1;
      }
    }
    return 0;
}