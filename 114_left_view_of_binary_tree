// Iterative Left view

vector<int> getLeftView(TreeNode<int> *root) {
    vector<int> ans;
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        int sz = q.size();
        for(int i=0; i<sz; i++) {
            TreeNode<int>* temp = q.front();
            q.pop();
            if(i == 0) {                      // Print if first node in queue
                ans.push_back(temp->data);
            }
            if(temp->left) q.push(temp->left);
            if(temp->right) q.push(temp->right);
        }
    }
    return ans;
}

// Recursive Left View

void leftview(TreeNode<int> *root, int level, vector<int>& ans) {
    if(root == NULL) return;
    if(level == ans.size()) {
        ans.push_back(root->data);
    }
    leftview(root->left, level+1, ans);
    leftview(root->right, level+1, ans);
}

vector<int> getLeftView(TreeNode<int> *root) {
    vector<int> ans;
    // level = 0 initially
    leftview(root, 0, ans);
    return ans;
}




// Iterative right view

vector<int> getRightView(TreeNode<int> *root) {
    vector<int> ans;
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        int sz = q.size();
        for(int i=0; i<sz; i++) {
            TreeNode<int>* temp = q.front();
            q.pop();
            if(i == sz-1) {                        // Print of last node in queue
                ans.push_back(temp->data);
            }
            if(temp->left) q.push(temp->left);
            if(temp->right) q.push(temp->right);
        }
    }
    return ans;
}

// Recursive right view

void rightview(TreeNode<int> *root, int level, vector<int>& ans) {
    if(root == NULL) return;
    if(level == ans.size()) {
        ans.push_back(root->data);
    }
    rightview(root->right, level+1, ans);
    rightview(root->left, level+1, ans);
}

vector<int> getrightView(TreeNode<int> *root) {
    vector<int> ans;
    // level = 0 initially
    rightview(root, 0, ans);
    return ans;
}