// Coding Ninja - Print the MST with its weight

#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, 
vector<pair<pair<int, int>, int>> &g) {
    
    vector<pair<int, int>> adj[n+1];
    for(auto it : g) {
        int u = it.first.first;
        int v = it.first.second;
        int wt = it.second;

        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }

    vector<pair<pair<int, int>, int>> ans;
    priority_queue<pair<pair<int, int>, int>, vector<pair<pair<int, int>, int>>, greater<pair<pair<int, int>, int>>> pq;
    
    vector<int> vis(n+1, 0);
    pq.push({{0, 1}, -1});
    while(!pq.empty()) {
        auto it = pq.top();
        pq.pop();
        int wt = it.first.first;
        int node = it.first.second;
        int parent = it.second;

        if(vis[node]) continue;
        vis[node] = 1;
        if(parent != -1) ans.push_back({{node, parent}, wt});

        for(auto i : adj[node]) {
            int adjNode = i.first;
            int adjWt = i.second;
            if(!vis[adjNode]) {
                pq.push({{adjWt, adjNode}, node});
            }
        }
    }
    return ans;
}


// Print sum of MST

int spanningTree(int V, vector<vector<int>> adj[]) {
    // code here
    priority_queue< pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> >pq;
    pq.push({0, 0});
    vector<int>vis(V, 0);
    int sum=0;
    
    while(!pq.empty()){
        int node=pq.top().second;
        int wt=pq.top().first;
        pq.pop();
        
        if(vis[node]==1) continue;
        vis[node]=1;
        sum+=wt;
        
        for(auto it:adj[node]){
            int adjNode=it[0];
            int adjW=it[1];
            if(vis[adjNode]!=1){
                pq.push({adjW, adjNode});
            }
        }
    }
    return sum;
}