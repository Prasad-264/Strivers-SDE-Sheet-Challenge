// Brute Force Approach

#include <bits/stdc++.h> 
int maximumProduct(vector<int> &arr, int n) {
	int maxi = INT_MIN;
	for(int i=0; i<n; i++) {
		int pro = 1;
		for(int j=i; j<n; j++) {
			pro *= arr[j];
			maxi = max(maxi, pro);
		}
	}
	return maxi;
}


// Optimal Approach - Using prefix and suffix product
// when encounerted 0 start the prefix and suffix from 1

#include <bits/stdc++.h> 
int maximumProduct(vector<int> &arr, int n) {
	int maxi = INT_MIN;
	int prefix = 1, suffix = 1;
	for(int i=0; i<n; i++) {
		if(prefix == 0) prefix = 1;     // prefix gets multiplied with 0
		if(suffix == 0) suffix = 1;     // suffix gets multiplied with 0
		
		prefix *= arr[i];
		suffix *= arr[n-i-1];

		maxi = max(maxi, max(prefix, suffix));
	}
	return maxi;
}
