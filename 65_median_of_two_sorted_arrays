// Brute force
double median(vector<int>& a, vector<int>& b) {
	int n = a.size(), m = b.size();
	vector<int> arr(n + m, 0);
	int i = 0, j = 0, k = 0;
	while(i < n && j < m) {
		if(a[i] <= b[j]) {
			arr[k++] = a[i++];
		}
		else {
			arr[k++] = b[j++];
		}
	}
	while(i < n) {
		arr[k++] = a[i++];
	}
	while(j < m) {
		arr[k++] = b[j++];
	}

	int len = n + m;
	if(len % 2 == 0) {
		return (double) (arr[len/2] + arr[len/2 - 1]) / 2.0;
	}
	else return (double) arr[len/2];
}


// Binary Search 

double median(vector<int>& a, vector<int>& b) {
	int n = a.size(), m = b.size();
	if(n > m) return median(b, a);
	int len = n + m;
	int low = 0, high = n;
	while(low <= high) {
		int cut1 = (low + high) / 2;
		int cut2 = (len+1) / 2 - cut1;

		int l1 = cut1 == 0 ? INT_MIN : a[cut1-1];
		int l2 = cut2 == 0 ? INT_MIN : b[cut2-1];
		int r1 = cut1 == n ? INT_MAX : a[cut1];
		int r2 = cut2 == m ? INT_MAX : b[cut2];

		if(l1 <= r2 && l2 <= r1) {
			if(len % 2 == 0) {
				return (double) (max(l1, l2) + min(r1, r2)) / 2.0;
			}
			else {
				return (double) max(l1, l2);
			}
		}
		else if(l1 > r2) {
			high = cut1 - 1;
		}
		else {
			low = cut1 + 1;
		}
	}
	return 0.0;
}