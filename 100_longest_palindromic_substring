// Brute force approach

#include<bits/stdc++.h>

bool isPalindrome(string &s, int n) {
    int i=0, j=n-1;
    while(i <= j) {
        if(s[i++] != s[j--]) {
            return false;
        }
    }
    return true;
}

string longestPalinSubstring(string str) {
    int n = str.size();

    int maxi = 0;
    string ans = "";
    for(int i=0; i<n; i++) {
        string temp = "";
        for(int j=i; j<n; j++) {
            temp += str[j];

            if(isPalindrome(temp, j-i+1)) {
                if(temp.size() > maxi) {
                    maxi = temp.size();
                    ans = temp;
                }
            }
        }
    }
    return ans;
}

// Optimal approach : DP
#include<bits/stdc++.h>


string longestPalinSubstring(string str) {
    int n = str.size();
    if(n == 1) return str;

    vector<vector<int>> dp(n, vector<int> (n, 0));
    int start = 0, end = 0;
    for(int i=0; i<n; i++) {
        for(int j=i; j>=0; j--) {
            if(i == j) {
                dp[i][j] = 1;
            }
            else if(i-j == 1) {
                if(str[i] == str[j]) dp[i][j] = 1;
            }
            else if(str[i] == str[j] && dp[i-1][j+1] == 1) {
                dp[i][j] = 1;
            }

            if(dp[i][j] == 1 && i-j > end - start) {
                start = j;
                end = i;
            }
        }
    }
    return str.substr(start, end+1);
}

// O(n^2)

#include<bits/stdc++.h>


string longestPalinSubstring(string str) {
    int n = str.size();
    if(n == 1) return str;

    int start = 0, end = 1;
    int l, r;

    for(int i=1; i<n; i++) {

        // even substring
        l = i-1;
        r = i;

        while(l >= 0 && r < n && str[l] == str[r]) {
            if(r-l+1 > end) {
                start = l;
                end = r-l+1;
            }
            l--;
            r++;
        }

        // odd substring
        l = i-1;
        r = i+1;

        while(l >= 0 && r < n && str[l] == str[r]) {
            if(r-l+1 > end) {
                start = l;
                end = r-l+1;
            }
            l--;
            r++;
        }
    }
    return str.substr(start, end);
}
