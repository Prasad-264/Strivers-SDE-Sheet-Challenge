
// Recursion

#include <bits/stdc++.h> 

int fun(int i, int j, vector<int>& arr) {
    if(i == j) return 0;
    int mini = INT_MAX;
    for(int k=i; k<j; k++) {
        int steps = (arr[i-1] * arr[k] * arr[j] ) + fun(i, k, arr) + fun(k+1, j, arr);
        mini = min(mini, steps);
    }
    return mini;
}

int matrixMultiplication(vector<int> &arr, int N) {
    return fun(1, N-1, arr);
}


// memoization

#include <bits/stdc++.h> 

int fun(int i, int j, vector<int>& arr, vector<vector<int>> &dp) {
    if(i == j) return 0;
    if(dp[i][j] != -1) return dp[i][j];
    int mini = INT_MAX;
    for(int k=i; k<j; k++) {
        int steps = (arr[i-1] * arr[k] * arr[j] ) + fun(i, k, arr, dp) + fun(k+1, j, arr, dp);
        mini = min(mini, steps);
    }
    return dp[i][j] = mini;
}

int matrixMultiplication(vector<int> &arr, int n) {
    vector<vector<int>> dp(n, vector<int> (n, -1));
    return fun(1, n-1, arr, dp);
}

// Tabulation

#include <bits/stdc++.h> 

int matrixMultiplication(vector<int> &arr, int n) {
    vector<vector<int>> dp(n, vector<int> (n, 0));
    // Base Case
    for(int i=1; i<n; i++) dp[i][i] = 0;

    for(int i=n-1; i>=1; i--) {
        for(int j=i+1; j<n; j++) {
            int mini = INT_MAX;
            for(int k=i; k<j; k++) {
                int steps = (arr[i-1] * arr[k] * arr[j]) + dp[i][k] + dp[k+1][j];
                mini = min(mini, steps);
            }
            dp[i][j] = mini;
        }
    }

    return dp[1][n-1];
}