// Using Priority Queue (Min Heap)

#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int v, int edges, int source) {
    vector<pair<int, int>> adj[v];
    for(int i=0; i<vec.size(); i++) {
        int u = vec[i][0];
        int v = vec[i][1];
        int d = vec[i][2];
        adj[u].push_back({v, d});
        adj[v].push_back({u, d});
    }

    vector<int> dist(v, INT_MAX);

    // pq -> {dist, node}
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    dist[source] = 0;
    pq.push({0, source});

    while(!pq.empty()) {
        int dis = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        for(auto it : adj[node]) {
            int adjNode = it.first;
            int adjDist = it.second;

            if(dis + adjDist < dist[adjNode]) {
                dist[adjNode] = dis + adjDist;
                pq.push({dist[adjNode], adjNode});
            }
        }
    }
    return dist;
}


// Using Set Data Structure

vector<int> dijkstra(vector<vector<int>> &vec, int v, int edges, int source) {
    vector<pair<int, int>> adj[v];
    for(int i=0; i<vec.size(); i++) {
        int u = vec[i][0];
        int v = vec[i][1];
        int d = vec[i][2];
        adj[u].push_back({v, d});
        adj[v].push_back({u, d});
    }

    vector<int> dist(v, INT_MAX);

    set<pair<int, int>> st;
    st.insert({0, source});
    dist[source] = 0;
    while(!st.empty()) {
        auto it = *(st.begin());
        int dis = it.first;
        int node = it.second;
        st.erase(it);

        for(auto i : adj[node]) {
            int adjNode = i.first;
            int adjDist = i.second;

            if(dis + adjDist < dist[adjNode]) {

                // delete the already present node in set
                if(dist[adjNode] != INT_MAX) st.erase({dist[adjNode], adjNode});

                dist[adjNode] = dis + adjDist;
                st.insert({dist[adjNode], adjNode});
            }
        }
    }
    return dist;
}
