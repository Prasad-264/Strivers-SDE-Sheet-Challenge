#include <bits/stdc++.h> 

class DisjointSet {
	vector<int> rank, parent;
public:
	DisjointSet(int n) {
		rank.resize(n+1, 0);
		parent.resize(n+1);
		for(int i=0; i<=n; i++) parent[i] = i;
	}

	int findParent(int u) {
		if(u == parent[u]) return u;
		return parent[u] = findParent(parent[u]);
	}

	void unionByRank(int u, int v) {
		int up = findParent(u);
		int vp = findParent(v);

		if(up == vp) return;
		if(rank[up] < rank[vp]) {
			parent[up] = vp;
		}
		else if(rank[vp] < rank[up]) {
			parent[vp] = up;
		}
		else {
			parent[vp] = up;
			rank[up]++;
		}
	}
};


int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	vector<pair<int, pair<int, int>>> g;
	for(auto it : graph) {
		int u = it[0];
		int v = it[1];
		int wt = it[2];

		g.push_back({wt, {u, v}});
	}
	sort(g.begin(), g.end());

	DisjointSet ds(n);
	int weight = 0;
	for(auto it : g) {
		int wt = it.first;
		int u = it.second.first;
		int v = it.second.second;

		if(ds.findParent(u) != ds.findParent(v)) {
			weight += wt;
			ds.unionByRank(u, v);
		}
	}
	return weight;
}