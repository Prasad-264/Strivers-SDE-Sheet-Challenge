// BFS Solution

#include <bits/stdc++.h>
bool iscycleBFS(int src, vector<int> adj[], vector<int>& vis) {
    vis[src] = 1;
    queue<pair<int, int>> q;
    q.push({src, -1});
    while(!q.empty()) {
        auto it = q.front();
        q.pop();

        int node = it.first;
        int parent = it.second;

        for(auto adjNode : adj[node]) {
            if(!vis[adjNode]) {
                vis[adjNode] = 1;
                q.push({adjNode, node});
            }
            else if(parent != adjNode) {
                return true;
            }
        }
    }
}

string cycleDetection (vector<vector<int>>& edges, int n, int m) {
    vector<int> adj[n+1];
    for(auto it : edges) {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }

    vector<int> vis(n+1, 0);
    bool flag = false;
    for(int i=0; i<n; i++) {
        if(!vis[i]) {
            if(iscycleBFS(i, adj, vis)) {
                flag = true;
            }
        }
    }
    if(flag) return "Yes";
    return "No";
}
// TC - O(n) + O(2E)



// DFS Solution


bool iscycleDFS(int node, int parent, vector<int> adj[], vector<int> &vis) {
    vis[node] = 1;
    for(auto it : adj[node]) {
        if(!vis[it]) {
            if(iscycleDFS(it, node, adj, vis)) return true;
        }
        else if(parent != it) {
            return true;
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m) {
    vector<int> adj[n+1];
    for(auto it : edges) {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }

    vector<int> vis(n+1, 0);
    bool flag = false;
    for(int i=0; i<n; i++) {
        if(!vis[i]) {
            if(iscycleDFS(i, -1, adj, vis)) {
                flag = true;
            }
        }
    }
    if(flag) return "Yes";
    return "No";
}