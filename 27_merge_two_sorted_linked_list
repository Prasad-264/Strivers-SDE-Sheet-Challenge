// Brute Force

#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure.
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* l1, Node<int>* l2) {
    if(l1 == NULL) return l2;
    if(l2 == NULL) return l1;

    Node<int>* dummy = new Node<int>(-1);
    Node<int>* cur = dummy;

    while(l1 != NULL && l2 != NULL) {
        if(l1->data <= l2->data) {
            Node<int>* newNode = new Node<int>(l1->data);
            cur->next = newNode;
            l1 = l1->next;
        }
        else {
            Node<int>* newNode = new Node<int>(l2->data);
            cur->next = newNode;
            l2 = l2->next;
        }
        cur = cur->next;
    }
    if(l1 == NULL) cur->next = l2;
    if(l2 == NULL) cur->next = l1;

    return dummy->next;
}

// TC - O(n + m)
// SC - O(n + m)

// optimal Solution

#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure. 
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* l1, Node<int>* l2) {
    if(l1 == NULL) return l2;
    if(l2 == NULL) return l1;

    if(l1->data > l2->data) swap(l1, l2);

    Node<int>* res = l1;

    while(l1 != NULL && l2 != NULL) {
        Node<int>* temp = NULL;

        while (l1 != NULL && l1->data <= l2->data) {

            temp = l1; // storing last sorted node
            l1 = l1->next;
        }

        // link previous sorted node with
        // next larger node in list2
        temp->next = l2;
        swap(l1, l2);
    }

    return res;
}
