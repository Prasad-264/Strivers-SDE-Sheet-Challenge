// Preorder Inorder Postorder Traversals in One Traversal

// Brute force using 3 traversals indivisual

#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

void inOrder(BinaryTreeNode<int> *root, vector<int> &ds) {
    if(root == NULL) return;

    inOrder(root->left, ds);
    ds.push_back(root->data);
    inOrder(root->right, ds);
}

void preOrder(BinaryTreeNode<int> *root, vector<int> &ds) {
    if(root == NULL) return;

    ds.push_back(root->data);
    preOrder(root->left, ds);
    preOrder(root->right, ds);
}

void postOrder(BinaryTreeNode<int> *root, vector<int> &ds) {
    if(root == NULL) return;

    postOrder(root->left, ds);
    postOrder(root->right, ds);
    ds.push_back(root->data);
}

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    vector<vector<int>> ans;
    
    vector<int> inorder;
    inOrder(root, inorder);
    ans.push_back(inorder);

    vector<int> preorder;
    preOrder(root, preorder);
    ans.push_back(preorder);

    vector<int> postorder;
    postOrder(root, postorder);
    ans.push_back(postorder);
    
    return ans;
}



// optimise - Preorder Inorder Postorder Traversals in One Traversal


vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    vector<vector<int>> ans;
    if(root == NULL) return ans;
    vector<int> ino, pre, post;

    stack<pair<BinaryTreeNode<int>*, int>> st;
    st.push({root, 1});

    while(!st.empty()) {
        auto it = st.top();
        st.pop();

        BinaryTreeNode<int> * node = it.first;
        int num = it.second;

        if(num == 1) {
            pre.push_back(node->data);
            num++;
            st.push({node, num});
            if(node->left) {
                st.push({node->left, 1});
            }
        }
        else if(num == 2) {
            ino.push_back(node->data);
            num++;
            st.push({node, num});
            if(node->right) {
                st.push({node->right, 1});
            }
        }
        else if(num == 3) {
            post.push_back(node->data);
        }
    }
    ans.push_back(ino);
    ans.push_back(pre);
    ans.push_back(post);
    return ans;
}