// Naive solution (Sorting)

max element will be = n - k
min element will be = k - 1

#include <bits/stdc++.h>
vector<int> kthSmallLarge(vector<int> &arr, int n, int k) {
	sort(arr.begin(), arr.end());
	vector<int> ans;
	ans.push_back(arr[k-1]);
	ans.push_back(arr[n-k]);
	return ans;
}

// using heap (priority queue)

#include <bits/stdc++.h>
vector<int> kthSmallLarge(vector<int> &arr, int n, int k) {
	vector<int> ans;

	// Min element
	priority_queue<int, vector<int>, greater<int>> min_pq;
	for(int i=0; i<n; i++) {
		min_pq.push(arr[i]);
	}
	int temp = k - 1;
	while(temp--) {
		min_pq.pop();
	}
	ans.push_back(min_pq.top());

	// Max element
	priority_queue<int> max_pq;
	for(int i=0; i<n; i++) {
		max_pq.push(arr[i]);
	}
	temp = k - 1;
	while(temp--) {
		max_pq.pop();
	}
	ans.push_back(max_pq.top());
	
	return ans;
}