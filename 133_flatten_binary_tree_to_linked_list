#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure.

    template <typename T>
    class TreeNode {
        public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

// Iterative Approach using stack

TreeNode<int> *flattenBinaryTree(TreeNode<int> *root) {
    if(root == NULL) return NULL;
    
    stack<TreeNode<int>*> st;
    st.push(root);

    while(!st.empty()) {
        TreeNode<int>* temp = st.top();
        st.pop();

        if(temp->right) st.push(temp->right);
        if(temp->left) st.push(temp->left);

        if(!st.empty()) temp->right = st.top();   // mark top of stack as next right node
        temp->left = NULL;
    }
    return root;
}




// Recursive Approach (right -> left -> root) } backtracking

void flatten(TreeNode<int> *root, TreeNode<int>* &prev){
    if(root == NULL) return;

    flatten(root->right,prev);
    flatten(root->left,prev);
    
    root->right=prev;
    root->left=NULL;
    prev=root;
}

TreeNode<int> *flattenBinaryTree(TreeNode<int> *root) {
    TreeNode<int>* prev = NULL;
    flatten(root, prev);
    return root;
}

