#include <bits/stdc++.h> 
/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/

// Naive approach

void inorder(BinaryTreeNode<int> *root, vector<int>& arr) {
    if(root == NULL) return;
    inorder(root->left, arr);
    arr.push_back(root->data);
    inorder(root->right, arr);
}

bool pairSumBst(BinaryTreeNode<int> *root, int k) {
    vector<int> arr;
    inorder(root, arr);

    int i=0, j=arr.size()-1;
    while(i < j) {
        int sum = arr[i] + arr[j];
        if(sum == k) return true;
        else if(sum < k) i++;
        else j--;
    }
    return false;
}

// Optimized Approach

#include <bits/stdc++.h> 
/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/

class BSTiterator {
public:
    stack<BinaryTreeNode<int>*> st;
    bool reverse = true;

public:
    BSTiterator(BinaryTreeNode<int> *root, bool isrev) {
        pushAll(root);
        reverse = isrev;
    }

    int next() {
        BinaryTreeNode<int> *node = st.top();
        st.pop();
        if(!reverse) pushAll(node->right);
        else pushAll(node->left);
        return node->data;
    }

private:
    void pushAll(BinaryTreeNode<int> *root) {
        while(root) {
            st.push(root);
            if(reverse == true) root = root->right;
            else root = root->left;
        }
    }
};

bool pairSumBst(BinaryTreeNode<int> *root, int k) {
    if(root == NULL) return false;

    BSTiterator l(root, false);
    BSTiterator r(root, true);


    int i = l.next();
    int j = r.next();
    while(i < j) {
        int sum = i + j;
        if(sum == k) return true;
        else if(sum < k) i = l.next();
        else j = r.next();
    }
    return false;
}