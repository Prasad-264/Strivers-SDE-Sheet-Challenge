int helper(vector<int>& arr, int n, int k, vector<vector<int>>& dp) {
    // Base condition.
    if (n <= 0) {
        // If k = 0, we reached target sum.
        if (k == 0) return 1;
        else return 0;
    }

    // If memo[n][k] not equal to -1
    // then result of n,k already calculated.
    if (dp[n][k] != -1) return dp[n][k];

    // arr[n-1] not taken in considertion.   
    int x = helper(arr, n - 1, k, dp);
    int y = 0;
    if(k - arr[n-1] >= 0){
        // arr[n-1] taken in considertion.
        y = helper(arr, n - 1, k - arr[n-1], dp);    
    }

    // Store current result in memo.
    dp[n][k] = x || y;
    // Return current result.
    return dp[n][k];
}

bool subsetSumToK(int n, int k, vector<int>& arr) {
    vector<vector<int>> dp(n+1, vector<int> (k+1, -1));
    int ans = helper(arr, n, k, dp);
    if (ans == 1) return true;
    else return false;
}