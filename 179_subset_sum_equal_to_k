// Recursion

#include <bits/stdc++.h> 

bool fun(int ind, int target, vector<int>& arr) {
    if(target == 0) return true;
    if(ind == 0) {
        return arr[0] == target;
    }

    // not pick
    bool notPick = fun(ind-1, target, arr);
    // pick
    bool pick = false;
    if(target >= arr[ind]) pick = fun(ind-1, target - arr[ind], arr);

    return pick || notPick;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    return fun(n-1, k, arr);
}



// Memoization


#include <bits/stdc++.h> 

int fun(int ind, int target, vector<int>& arr, vector<vector<int>> &dp) {
    if(target == 0) return 1;
    if(ind == 0) {
        if(arr[0] == target) return 1;
        else return 0;
    }

    if(dp[ind][target] != -1) return dp[ind][target];

    // not pick
    int notPick = fun(ind-1, target, arr, dp);
    // pick
    int pick = 0;
    if(target >= arr[ind]) pick = fun(ind-1, target - arr[ind], arr, dp);

    return dp[ind][target] = pick || notPick;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>> dp(n+1, vector<int> (k+1, -1));
    return fun(n-1, k, arr, dp);
}




// Tabulation

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>> dp(n+1, vector<bool> (k+1, false));
    for(int i=0; i<n; i++) dp[i][0] = true;
    dp[0][arr[0]] = true;

    for(int ind = 1; ind<=n; ind++) {
        for(int tar=1; tar<=k; tar++) {
            // not pick
            bool notPick = dp[ind-1][tar] ;
            // pick
            bool pick = false;
            if(tar >= arr[ind]) pick = dp[ind-1][tar-arr[ind]];

            dp[ind][tar] = pick || notPick;
        }
    }

    return dp[n-1][k];
}