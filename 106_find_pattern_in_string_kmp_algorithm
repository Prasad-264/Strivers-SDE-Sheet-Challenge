#include <bits/stdc++.h> 

// pattern  = a b c a b y
// lpsArray = 0 0 0 1 2 0

vector<int> lpsArray(string &pat, int n) {
    vector<int> lps(n, 0);
    int len=0, i=1;
    while(i < n) {
        if(pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else {
            if(len != 0) {
                len = lps[len-1];
            }
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

bool findPattern(string p, string s) {
    int n = s.size(), m = p.size();
    vector<int> lps = lpsArray(p, m);

    vector<int> ans;

    int i=0; // for string s
    int j=0; // for string p

    while((n-i) >= (m-j)) {
        if(s[i] == p[j]) {
            i++;
            j++;
        }
        if(j == m) {
            return true;
            // ans.push_back(i-j);
            // j = lps[j-1];
        }
        else if(i < n && s[i] != p[j]) {
            if(j != 0) {
                j = lps[j-1];
            }
            else {
                i++;
            }
        }
    }
    //return ans;
    return false;
}