// Brute force

#include <bits/stdc++.h>

int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    set<int> s(arr.begin(), arr.end());
    int maxi = 0;
    for(auto it : arr) {
        if(!s.count(it - 1)) {
            int curnum = it;
            int cnt = 1;

            while(s.count(curnum+1)) {
                curnum++;
                cnt++;
            }

            maxi = max(maxi, cnt);
        }
    }
    return maxi;
}


// Optimal solution - hashing

#include <bits/stdc++.h>

int LongestSubsetWithZeroSum(vector < int > arr) {
    int n = arr.size();
    unordered_map<int, int> mp;
    int maxi = 0;
    int sum = 0;
    for(int i=0; i<n; i++) {
      sum += arr[i];
      if(sum == 0) maxi = i + 1;
      else {
        if(mp.find(sum) != mp.end()) {
          maxi = max(maxi, i-mp[sum]);
        }
        else {
          mp[sum] = i;
        }
      }
    }
    return maxi;
}