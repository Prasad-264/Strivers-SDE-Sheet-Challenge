
// same as palindrome partition II


bool isValid(string& s, vector<string>& dict) {
    auto it = find(dict.begin(), dict.end(), s);
    if(it != dict.end()) return true;
    return false;
}

void patition(int ind, int n, string &s, vector<string>& dict, vector<string>& ans, vector<string> &ds) {
    if(ind == n) {
        string str = "";
        for(auto it : ds) {
            str = str + it + " ";
        }
        ans.push_back(str);
        return;
    }

    string temp = "";
    for(int i=ind; i<n; i++) {
        temp += s[i];
        if(isValid(temp, dict)) {
            ds.push_back(temp);
            patition(i+1, n, s, dict, ans, ds);
            ds.pop_back();
        }
    }
}

vector<string> getAllValidSentences(string &s, vector<string> &dict) {
    vector<string> ans;
    vector<string> ds;
    patition(0, s.size(), s, dict, ans, ds);
    return ans;
}




// Another problem

#include <bits/stdc++.h> 
bool wordBreak(vector < string > & arr, int n, string & target) {
    int i = 0 ;
    while(i < n) {
        if(target.find(arr[i]) != target.npos) {
            target.erase(target.find(arr[i]) , arr[i].size());
        }
        else {
            i++;
        }
    }
    if(target.size() == 0) return 1;
    else return 0;
}