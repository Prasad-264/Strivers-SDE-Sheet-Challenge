// Brute force

#include <bits/stdc++.h>
int getMedian(vector<vector<int>> &mat) {
    int n = mat.size();
    int m = mat[0].size();

    vector<int> arr(n*m);
    int k=0;
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            arr[k++] = mat[i][j];
        }
    }
    sort(arr.begin(), arr.end());
    return arr[(n*m)/2];
}

// Optimal - Binary Search

#include <bits/stdc++.h>

int lessThanMid(int k, vector<int>& row) {
    int low = 0;
    int high = row.size()-1;
    while(low <= high) {
        int mid = (low + high) >> 1;
        if(row[mid] <= k) low = mid+1;
        else high = mid-1;
    }
    return low;
}

int getMedian(vector<vector<int>> &mat) {
    int n = mat.size();
    int m = mat[0].size();

    int low = 1;
    int high = 1e5;

    while(low <= high) {
        int mid = (low + high) >> 1;
        int cnt = 0;
        for(int i=0; i<n; i++) {
            cnt += lessThanMid(mid, mat[i]);
        }
        if(cnt <= (n*m)/2) low = mid+1;
        else high = mid-1;
    }
    return low;
}