// implement a stack using two queues

#include <bits/stdc++.h> 
class Stack {
    queue<int> q1, q2;
public:
    Stack() {
        // Implement the Constructor.
    }

    /*----------------- Public Functions of Stack -----------------*/

    int getSize() {
        q1.size();
    }

    bool isEmpty() {
        return q1.size() == 0;
    }

    void push(int element) {
        while(!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }

        q1.push(element);

        while(!q2.empty()) {
            q1.push(q2.front());
            q2.pop();
        }
    }

    int pop() {
        if(isEmpty()) return -1;
        
        int temp = q1.front();
        q1.pop();
        return temp;
    }

    int top() {
        if(isEmpty()) return -1;
        return q1.front();
    }
};



// implement a stack using single queue

#include <bits/stdc++.h> 
class Stack {
    queue<int> q;
public:
    Stack() {
        // Implement the Constructor.
    }

    /*----------------- Public Functions of Stack -----------------*/

    int getSize() {
        q.size();
    }

    bool isEmpty() {
        return q.size() == 0;
    }

    void push(int element) {
        q.push(element);
        for(int i=0; i<q.size()-1; i++) {
            q.push(q.front());
            q.pop();
        }
    }

    int pop() {
        if(isEmpty()) return -1;
        
        int temp = q.front();
        q.pop();
        return temp;
    }

    int top() {
        if(isEmpty()) return -1;
        return q.front();
    }
};