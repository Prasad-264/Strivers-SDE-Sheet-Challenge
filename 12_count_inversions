// Brute force

#include <bits/stdc++.h> 
long long getInversions(long long *arr, int n) {
    long long cnt = 0;
    for(long long i=0; i<n; i++) {
        for(long long j=i+1; j<n; j++) {
            if(i < j && arr[i] > arr[j]) {
                cnt++;
            }
        }
    }
    return cnt;
}

// Optimal Approach - Merge Sort

#include <bits/stdc++.h> 
#define ll long long
ll merge(ll a[], ll temp[], int low, int mid, int high) {
    ll cnt = 0; 
    int left = low, right = mid+1; int k = low; 

    while(left <= mid && right <= high) {
        if(a[left] <= a[right]) {
            temp[k++] = a[left++];
        }
        else {
            temp[k++] = a[right++];
            cnt += mid - left + 1;
        }
    }

    while(left <= mid) {
        temp[k++] = a[left++];
    }
    while(right <= high) {
        temp[k++] = a[right++];
    }
    for(int i=low; i<=high; i++)
        a[i] = temp[i];

    return cnt;
}

ll mergeSort(ll arr[], ll temp[], int low, int high) {
    ll cnt = 0;
    if(low < high) {
        ll mid = (low + high) >> 1;
        cnt += mergeSort(arr, temp, low, mid);
        cnt += mergeSort(arr, temp, mid+1, high);
        cnt += merge(arr, temp, low, mid, high);
    }
    return cnt;
}

ll mergeSortInitial(ll arr[], int low, int high) {
    ll temp[high-low+1];
    return mergeSort(arr, temp, low, high);
}

ll getInversions(ll *arr, int n) {
    return mergeSortInitial(arr, 0, n-1);
}
    
// TC - O(n log n)

