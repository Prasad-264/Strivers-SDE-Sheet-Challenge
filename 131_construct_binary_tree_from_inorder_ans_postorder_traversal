#include <bits/stdc++.h>
/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/

// inorder  =  [4  5  2  6  7  3  1]
                ^        ^     ^  ^            
                    lt          rt
                    
// postorder = [4  2  5  1  6  3  7]
                ^        ^  ^  ^  ^
                    lt       rt   root  


TreeNode<int>* buildTree(vector<int>& inOrder, int instart, int inend, 
     vector<int>& postOrder, int poststart, int postend, unordered_map<int, int>& mp) {
     
     if(instart > inend || poststart > postend) return NULL;

     TreeNode<int>* root = new TreeNode<int>(postOrder[postend]);
     int inroot = mp[root->data];
     int numLeft = inroot - instart;

     root->left = buildTree(inOrder, instart, inroot-1, postOrder, poststart, poststart + numLeft - 1, mp);
     root->right = buildTree(inOrder, inroot+1, inend, postOrder, poststart + numLeft, postend-1, mp);

     return root;
}


TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) {
     unordered_map<int, int> mp;
     for(int i=0; i<inOrder.size(); i++) {
          mp[inOrder[i]] = i;
     }

     TreeNode<int>* root = buildTree(inOrder, 0, inOrder.size()-1, postOrder, 0, postOrder.size()-1, mp);

     return root;
}
