// Brute force Approach

#include <bits/stdc++.h> 
vector<int> maxMinWindow(vector<int> a, int n) {
    vector<int> ans(n, INT_MIN);
    for(int i=0; i<n; i++) {
        for(int j=i; j<n; j++) {
            int len = j-i+1;
            int temp = INT_MAX;
            for(int k=i; k<=j; k++) {
                temp = min(temp, a[k]);
            }
            ans[len-1] = max(ans[len-1], temp);
        }
    }
    return ans;
}

// Optimal solution

#include <bits/stdc++.h> 
vector<int> maxMinWindow(vector<int> &a, int n) {
    
    vector<int> res(n,INT_MIN);
    
    stack<int> s;
    a.push_back(INT_MIN);
    
    for (int i = 0; i < a.size(); i++)
    {
        while(!s.empty() && a[s.top()]>=a[i]){
            int top = a[s.top()]; s.pop();
            int smal_left = s.empty()? -1 : s.top();
            int range = i - smal_left - 1;
            if(res[range-1]<top) res[range-1] = top;
        }
        s.push(i);
    }

    int max=INT_MIN;

    for(int i = res.size()-1;i>-1;i--){
        if(res[i]>max) max = res[i];
        res[i] = max;
    }
    
    return res;
}

// Optimal solution 2

// O(n) 

vector<int> previousSmaller(vector<int> &arr, int n) {
    vector<int> prev(n);
    stack<int> s;
    for (int i = 0; i < n; i++) {
        while (!s.empty() && arr[s.top()] >= arr[i]) {
            s.pop();
        }
        if (s.empty()) {
            prev[i] = -1;
        } 
        else {
            prev[i] = s.top();
        }
        s.push(i);
    }
    return prev;
}

vector<int> nextSmaller(vector<int> &arr, int n) {
    stack<int> s;
    vector<int> next(n);
    for (int i = n - 1; i >= 0; i--) {
        while (!s.empty() && arr[s.top()] >= arr[i]) {
            s.pop();
        }   
        if (s.empty()) {
            next[i] = n;
        } 
        else {
            next[i] = s.top();
        }
        s.push(i);
    }
    return next;
}

vector<int> maxMinWindow(vector<int> &arr, int n) {
    // answer[i] will store the maximum of minimum for every window size 
    vector<int> answer(n, INT_MIN);
	
    // next[i] will store the index of next smaller element which lie on the right hand side of it
    vector<int> next = nextSmaller(arr, n);

   //prev[i] will store the index of previous smaller element which lie on the left hand side of it
    vector<int> prev = previousSmaller(arr, n);

    for (int i = 0; i < n; i++) {
        // Length of the window in which a[i] is minimum
        int length = next[i] - prev[i] - 1;

        // Update the answer
        answer[length - 1] = max(answer[length - 1], arr[i]);
    }

	// Some places in answer[] may not be filled yet.
	// so fill them by taking maximum 
    for (int i = n - 2; i >= 0; i--) 
    {
        answer[i] = max(answer[i], answer[i + 1]);
    }
    return answer;
}
