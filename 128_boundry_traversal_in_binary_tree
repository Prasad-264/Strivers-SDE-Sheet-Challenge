#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

bool isLeaf(TreeNode<int>* root) {
  return !root -> left && !root -> right;
}

void addLeftBoundry(TreeNode<int>* root, vector<int>& ans) {
    TreeNode<int>* node = root->left;
    while(node != NULL) {
        if(!isLeaf(node)) ans.push_back(node->data);
        if(node->left != NULL) node = node->left;
        else node = node->right;
    }
}

void addLeaves(TreeNode<int>* root, vector<int> &ans) {
    if(isLeaf(root)) {
        ans.push_back(root->data);
        return;
    }
    if(root->left) addLeaves(root->left, ans);
    if(root->right) addLeaves(root->right, ans);
}

void addRightBoundry(TreeNode<int>* root, vector<int> &ans) {
    TreeNode<int>* node = root->right;
    vector<int> temp;
    while(node != NULL) {
        if(!(isLeaf(node))) temp.push_back(node->data);
        if(node->right != NULL) node = node->right;
        else node = node->left;
    }
    for(int i=temp.size()-1; i>=0; i--) {
        ans.push_back(temp[i]);
    }
}

vector<int> traverseBoundary(TreeNode<int>* root) {
    vector<int> ans;
    if(root == NULL) return ans;

    if(!isLeaf(root)) ans.push_back(root->data);

    // add left nodes except leaf nodes
    addLeftBoundry(root, ans);

    // add all leaf nodes left -> right
    addLeaves(root, ans);

    // add right nodes except leaf nodes and from bottom to upside ^
    addRightBoundry(root, ans);

    return ans;
}