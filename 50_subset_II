// Recusrion + set


void fun(int ind, vector<int>& ds, vector<int>& arr, set<vector<int>>& st) {
    if(ind == arr.size()) {
        sort(ds.begin(), ds.end());
        st.insert(ds);
        return;
    }

    ds.push_back(arr[ind]);
    fun(ind+1, ds, arr, st);
    ds.pop_back();

    fun(ind+1, ds, arr, st);

}

vector<vector<int>> uniqueSubsets(int n, vector<int> &arr) {
    vector<vector<int>> ans;
    set<vector<int>> st;
    vector<int> ds;
    fun(0, ds, arr, st);

    for(auto it : st) {
        ans.push_back(it);
    }
    return ans;
}


// optimised approach

#include <bits/stdc++.h> 

void solve(int ind, vector<int>& temp, vector<vector<int>>& ans, vector<int>& arr, int n) {
    ans.push_back(temp);
    if(ind >= n) return;
    for(int i=ind; i<n; i++) {
        if(i > ind && arr[i] == arr[i-1]) continue;
        temp.push_back(arr[i]);
        solve(i+1, temp, ans, arr, n);
        temp.pop_back();
    }
}

vector<vector<int>> uniqueSubsets(int n, vector<int> &arr) {
    if(n == 0) return {};
    sort(arr.begin(), arr.end());
    vector<vector<int>> ans;
    vector<int> temp;
    solve(0, temp, ans, arr, n);
    return ans;
}

