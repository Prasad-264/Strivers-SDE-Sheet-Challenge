#include <bits/stdc++.h> 

class Node {
public:
    Node* links[26];
    bool flag = false;

public:
    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }

    void put(char ch, Node* node) {
        links[ch - 'a'] = node;
    }

    Node* get(char ch) {
        return links[ch - 'a'];
    }

    void setEnd() {
        flag = true;
    }

    bool getEnd() {
        return flag;
    }
};

class Trie {
private:    
    Node* root;

public:
    Trie() {
        root = new Node();
    }

    void insert(string& word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++) {
            if(!node->containsKey(word[i])) {
                node->put(word[i], new Node());
            }
            node = node->get(word[i]);
        }
        node->setEnd();
    }

    bool isPresent(string& word) {
        Node* node = root;
        for(int i=0; i<word.size(); i++) {
            if(!node->containsKey(word[i]) || node->getEnd() == false) {
                return false;
            }
            node = node->get(word[i]);
        }
        return node->getEnd();
    }
};

string completeString(int n, vector<string> &a) {
    Trie trie;
    for(int i=0; i<n; i++) {
        trie.insert(a[i]);
    }

    int maxi = INT_MIN;
    for(int i=0; i<n; i++) {
        if(trie.isPresent(a[i])) {
            maxi = max(maxi, a[i].size());
        }
    }

    return maxi;
}